// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/objectbox_models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 6220857766937871376),
    name: 'MedicalRecord',
    lastPropertyId: const obx_int.IdUid(5, 5451042993046725881),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 355572829428406068),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 853848794729982505),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2625965680639564787),
        name: 'doctorId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 270997779213627763),
        name: 'diagnosis',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5451042993046725881),
        name: 'patientId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 7646871497628673530),
        relationTarget: 'Patient',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'symptoms',
        srcEntity: 'Symptom',
        srcField: 'medicalRecord',
      ),
      obx_int.ModelBacklink(
        name: 'prescriptions',
        srcEntity: 'Prescription',
        srcField: 'medicalRecord',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 4738811752630441609),
    name: 'Patient',
    lastPropertyId: const obx_int.IdUid(5, 1172271226761831534),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2355407551182812344),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4956601638798462868),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6825910703907571836),
        name: 'age',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8017950836848578786),
        name: 'gender',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1172271226761831534),
        name: 'registrationDate',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'medicalRecords',
        srcEntity: 'MedicalRecord',
        srcField: 'patient',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 2721432068943826423),
    name: 'Prescription',
    lastPropertyId: const obx_int.IdUid(8, 2301083813379955514),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5208628506039161867),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4968221789289479563),
        name: 'medicineName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2541579118986207054),
        name: 'dosage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1696282553807032436),
        name: 'frequency',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 354194567283225182),
        name: 'startDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1969452431875348391),
        name: 'endDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3878324151556742783),
        name: 'notes',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2301083813379955514),
        name: 'medicalRecordId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 3444213983095570172),
        relationTarget: 'MedicalRecord',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 6571383549521064480),
    name: 'StaffMember',
    lastPropertyId: const obx_int.IdUid(8, 5443560183546466920),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8269684296091370705),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2522641378973383162),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6266122725468113662),
        name: 'role',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 769897230166953730),
        name: 'department',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8778813470781125921),
        name: 'contactNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4996117513336439419),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1789036364641173890),
        name: 'joinDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5443560183546466920),
        name: 'isActive',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 2305596125913505573),
    name: 'Symptom',
    lastPropertyId: const obx_int.IdUid(3, 4474772723541273962),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1403421909548575982),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4844272103569229648),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4474772723541273962),
        name: 'medicalRecordId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 6430270856096445239),
        relationTarget: 'MedicalRecord',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(5, 2305596125913505573),
    lastIndexId: const obx_int.IdUid(3, 6430270856096445239),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    MedicalRecord: obx_int.EntityDefinition<MedicalRecord>(
      model: _entities[0],
      toOneRelations: (MedicalRecord object) => [object.patient],
      toManyRelations: (MedicalRecord object) => {
        obx_int.RelInfo<Symptom>.toOneBacklink(
          3,
          object.id,
          (Symptom srcObject) => srcObject.medicalRecord,
        ): object.symptoms,
        obx_int.RelInfo<Prescription>.toOneBacklink(
          8,
          object.id,
          (Prescription srcObject) => srcObject.medicalRecord,
        ): object.prescriptions,
      },
      getId: (MedicalRecord object) => object.id,
      setId: (MedicalRecord object, int id) {
        object.id = id;
      },
      objectToFB: (MedicalRecord object, fb.Builder fbb) {
        final doctorIdOffset = fbb.writeString(object.doctorId);
        final diagnosisOffset = fbb.writeString(object.diagnosis);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.date.millisecondsSinceEpoch);
        fbb.addOffset(2, doctorIdOffset);
        fbb.addOffset(3, diagnosisOffset);
        fbb.addInt64(4, object.patient.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final doctorIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final diagnosisParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final object = MedicalRecord(
          id: idParam,
          doctorId: doctorIdParam,
          diagnosis: diagnosisParam,
          date: dateParam,
        );
        object.patient.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.patient.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<MedicalRecord>(
          object.symptoms,
          store,
          obx_int.RelInfo<Symptom>.toOneBacklink(
            3,
            object.id,
            (Symptom srcObject) => srcObject.medicalRecord,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<MedicalRecord>(
          object.prescriptions,
          store,
          obx_int.RelInfo<Prescription>.toOneBacklink(
            8,
            object.id,
            (Prescription srcObject) => srcObject.medicalRecord,
          ),
        );
        return object;
      },
    ),
    Patient: obx_int.EntityDefinition<Patient>(
      model: _entities[1],
      toOneRelations: (Patient object) => [],
      toManyRelations: (Patient object) => {
        obx_int.RelInfo<MedicalRecord>.toOneBacklink(
          5,
          object.id,
          (MedicalRecord srcObject) => srcObject.patient,
        ): object.medicalRecords,
      },
      getId: (Patient object) => object.id,
      setId: (Patient object, int id) {
        object.id = id;
      },
      objectToFB: (Patient object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final genderOffset = fbb.writeString(object.gender);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.age);
        fbb.addOffset(3, genderOffset);
        fbb.addInt64(4, object.registrationDate.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final ageParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final genderParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final registrationDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final object = Patient(
          id: idParam,
          name: nameParam,
          age: ageParam,
          gender: genderParam,
          registrationDate: registrationDateParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Patient>(
          object.medicalRecords,
          store,
          obx_int.RelInfo<MedicalRecord>.toOneBacklink(
            5,
            object.id,
            (MedicalRecord srcObject) => srcObject.patient,
          ),
        );
        return object;
      },
    ),
    Prescription: obx_int.EntityDefinition<Prescription>(
      model: _entities[2],
      toOneRelations: (Prescription object) => [object.medicalRecord],
      toManyRelations: (Prescription object) => {},
      getId: (Prescription object) => object.id,
      setId: (Prescription object, int id) {
        object.id = id;
      },
      objectToFB: (Prescription object, fb.Builder fbb) {
        final medicineNameOffset = fbb.writeString(object.medicineName);
        final dosageOffset = fbb.writeString(object.dosage);
        final frequencyOffset = fbb.writeString(object.frequency);
        final notesOffset = object.notes == null
            ? null
            : fbb.writeString(object.notes!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, medicineNameOffset);
        fbb.addOffset(2, dosageOffset);
        fbb.addOffset(3, frequencyOffset);
        fbb.addInt64(4, object.startDate.millisecondsSinceEpoch);
        fbb.addInt64(5, object.endDate.millisecondsSinceEpoch);
        fbb.addOffset(6, notesOffset);
        fbb.addInt64(7, object.medicalRecord.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final medicineNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final dosageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final frequencyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final endDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final notesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final startDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final object = Prescription(
          id: idParam,
          medicineName: medicineNameParam,
          dosage: dosageParam,
          frequency: frequencyParam,
          endDate: endDateParam,
          notes: notesParam,
          startDate: startDateParam,
        );
        object.medicalRecord.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.medicalRecord.attach(store);
        return object;
      },
    ),
    StaffMember: obx_int.EntityDefinition<StaffMember>(
      model: _entities[3],
      toOneRelations: (StaffMember object) => [],
      toManyRelations: (StaffMember object) => {},
      getId: (StaffMember object) => object.id,
      setId: (StaffMember object, int id) {
        object.id = id;
      },
      objectToFB: (StaffMember object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final roleOffset = fbb.writeString(object.role);
        final departmentOffset = fbb.writeString(object.department);
        final contactNumberOffset = fbb.writeString(object.contactNumber);
        final emailOffset = fbb.writeString(object.email);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, roleOffset);
        fbb.addOffset(3, departmentOffset);
        fbb.addOffset(4, contactNumberOffset);
        fbb.addOffset(5, emailOffset);
        fbb.addInt64(6, object.joinDate.millisecondsSinceEpoch);
        fbb.addBool(7, object.isActive);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final roleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final departmentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final contactNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final joinDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final isActiveParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          18,
          false,
        );
        final object = StaffMember(
          id: idParam,
          name: nameParam,
          role: roleParam,
          department: departmentParam,
          contactNumber: contactNumberParam,
          email: emailParam,
          joinDate: joinDateParam,
          isActive: isActiveParam,
        );

        return object;
      },
    ),
    Symptom: obx_int.EntityDefinition<Symptom>(
      model: _entities[4],
      toOneRelations: (Symptom object) => [object.medicalRecord],
      toManyRelations: (Symptom object) => {},
      getId: (Symptom object) => object.id,
      setId: (Symptom object, int id) {
        object.id = id;
      },
      objectToFB: (Symptom object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.medicalRecord.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = Symptom(id: idParam, name: nameParam);
        object.medicalRecord.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.medicalRecord.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [MedicalRecord] entity fields to define ObjectBox queries.
class MedicalRecord_ {
  /// See [MedicalRecord.id].
  static final id = obx.QueryIntegerProperty<MedicalRecord>(
    _entities[0].properties[0],
  );

  /// See [MedicalRecord.date].
  static final date = obx.QueryDateProperty<MedicalRecord>(
    _entities[0].properties[1],
  );

  /// See [MedicalRecord.doctorId].
  static final doctorId = obx.QueryStringProperty<MedicalRecord>(
    _entities[0].properties[2],
  );

  /// See [MedicalRecord.diagnosis].
  static final diagnosis = obx.QueryStringProperty<MedicalRecord>(
    _entities[0].properties[3],
  );

  /// See [MedicalRecord.patient].
  static final patient = obx.QueryRelationToOne<MedicalRecord, Patient>(
    _entities[0].properties[4],
  );

  /// see [MedicalRecord.symptoms]
  static final symptoms = obx.QueryBacklinkToMany<Symptom, MedicalRecord>(
    Symptom_.medicalRecord,
  );

  /// see [MedicalRecord.prescriptions]
  static final prescriptions =
      obx.QueryBacklinkToMany<Prescription, MedicalRecord>(
        Prescription_.medicalRecord,
      );
}

/// [Patient] entity fields to define ObjectBox queries.
class Patient_ {
  /// See [Patient.id].
  static final id = obx.QueryIntegerProperty<Patient>(
    _entities[1].properties[0],
  );

  /// See [Patient.name].
  static final name = obx.QueryStringProperty<Patient>(
    _entities[1].properties[1],
  );

  /// See [Patient.age].
  static final age = obx.QueryIntegerProperty<Patient>(
    _entities[1].properties[2],
  );

  /// See [Patient.gender].
  static final gender = obx.QueryStringProperty<Patient>(
    _entities[1].properties[3],
  );

  /// See [Patient.registrationDate].
  static final registrationDate = obx.QueryDateProperty<Patient>(
    _entities[1].properties[4],
  );

  /// see [Patient.medicalRecords]
  static final medicalRecords = obx.QueryBacklinkToMany<MedicalRecord, Patient>(
    MedicalRecord_.patient,
  );
}

/// [Prescription] entity fields to define ObjectBox queries.
class Prescription_ {
  /// See [Prescription.id].
  static final id = obx.QueryIntegerProperty<Prescription>(
    _entities[2].properties[0],
  );

  /// See [Prescription.medicineName].
  static final medicineName = obx.QueryStringProperty<Prescription>(
    _entities[2].properties[1],
  );

  /// See [Prescription.dosage].
  static final dosage = obx.QueryStringProperty<Prescription>(
    _entities[2].properties[2],
  );

  /// See [Prescription.frequency].
  static final frequency = obx.QueryStringProperty<Prescription>(
    _entities[2].properties[3],
  );

  /// See [Prescription.startDate].
  static final startDate = obx.QueryDateProperty<Prescription>(
    _entities[2].properties[4],
  );

  /// See [Prescription.endDate].
  static final endDate = obx.QueryDateProperty<Prescription>(
    _entities[2].properties[5],
  );

  /// See [Prescription.notes].
  static final notes = obx.QueryStringProperty<Prescription>(
    _entities[2].properties[6],
  );

  /// See [Prescription.medicalRecord].
  static final medicalRecord =
      obx.QueryRelationToOne<Prescription, MedicalRecord>(
        _entities[2].properties[7],
      );
}

/// [StaffMember] entity fields to define ObjectBox queries.
class StaffMember_ {
  /// See [StaffMember.id].
  static final id = obx.QueryIntegerProperty<StaffMember>(
    _entities[3].properties[0],
  );

  /// See [StaffMember.name].
  static final name = obx.QueryStringProperty<StaffMember>(
    _entities[3].properties[1],
  );

  /// See [StaffMember.role].
  static final role = obx.QueryStringProperty<StaffMember>(
    _entities[3].properties[2],
  );

  /// See [StaffMember.department].
  static final department = obx.QueryStringProperty<StaffMember>(
    _entities[3].properties[3],
  );

  /// See [StaffMember.contactNumber].
  static final contactNumber = obx.QueryStringProperty<StaffMember>(
    _entities[3].properties[4],
  );

  /// See [StaffMember.email].
  static final email = obx.QueryStringProperty<StaffMember>(
    _entities[3].properties[5],
  );

  /// See [StaffMember.joinDate].
  static final joinDate = obx.QueryDateProperty<StaffMember>(
    _entities[3].properties[6],
  );

  /// See [StaffMember.isActive].
  static final isActive = obx.QueryBooleanProperty<StaffMember>(
    _entities[3].properties[7],
  );
}

/// [Symptom] entity fields to define ObjectBox queries.
class Symptom_ {
  /// See [Symptom.id].
  static final id = obx.QueryIntegerProperty<Symptom>(
    _entities[4].properties[0],
  );

  /// See [Symptom.name].
  static final name = obx.QueryStringProperty<Symptom>(
    _entities[4].properties[1],
  );

  /// See [Symptom.medicalRecord].
  static final medicalRecord = obx.QueryRelationToOne<Symptom, MedicalRecord>(
    _entities[4].properties[2],
  );
}
