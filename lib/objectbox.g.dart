// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/models/doctor.dart';
import 'domain/models/patient.dart';
import 'domain/models/resource.dart';
import 'domain/models/staff.dart';
import 'domain/models/symptom.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3589654410475671040),
    name: 'Patient',
    lastPropertyId: const obx_int.IdUid(9, 6295609149330277630),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4507273143516838626),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5043518156541593493),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7161594422533731529),
        name: 'admissionTime',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2785636215794750152),
        name: 'remainingTime',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6817622524845841765),
        name: 'canPay',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2191306056843805128),
        name: 'satisfaction',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5386671366383370203),
        name: 'statusIndex',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6295609149330277630),
        name: 'doctorId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 6526479809396503328),
        relationTarget: 'Doctor',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(3, 6247702666988126792),
        name: 'symptoms',
        targetId: const obx_int.IdUid(2, 966435369277457379),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 966435369277457379),
    name: 'Symptom',
    lastPropertyId: const obx_int.IdUid(4, 4887158961425148644),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5707638972660770848),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6115484847584465177),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2115122784576756280),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4887158961425148644),
        name: 'cost',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 852381956415032145),
    name: 'Doctor',
    lastPropertyId: const obx_int.IdUid(4, 4359061917910403776),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6971711276057121047),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 701883069965648352),
        name: 'price',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7533788095722960118),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4359061917910403776),
        name: 'statusIndex',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 2152878305696205034),
        name: 'patients',
        targetId: const obx_int.IdUid(1, 3589654410475671040),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 3157690795780189958),
    name: 'StaffMember',
    lastPropertyId: const obx_int.IdUid(6, 6444217843449839179),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7836165155917857025),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6554558583321488485),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5108080924223681354),
        name: 'role',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 602064432013185771),
        name: 'salary',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8852562202791911366),
        name: 'efficiency',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6444217843449839179),
        name: 'quality',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 6706155608055063161),
    name: 'Resource',
    lastPropertyId: const obx_int.IdUid(5, 6687748386288108220),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4392675369765218745),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3955320649697329928),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 180220307429161005),
        name: 'total',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7169252498438211223),
        name: 'available',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6687748386288108220),
        name: 'typeIndex',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(5, 6706155608055063161),
    lastIndexId: const obx_int.IdUid(2, 6526479809396503328),
    lastRelationId: const obx_int.IdUid(3, 6247702666988126792),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [7254869800110046398],
    retiredPropertyUids: const [7091596234148460842],
    retiredRelationUids: const [7427554691800462366],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Patient: obx_int.EntityDefinition<Patient>(
      model: _entities[0],
      toOneRelations: (Patient object) => [object.doctor],
      toManyRelations: (Patient object) => {
        obx_int.RelInfo<Patient>.toMany(3, object.id): object.symptoms,
      },
      getId: (Patient object) => object.id,
      setId: (Patient object, int id) {
        object.id = id;
      },
      objectToFB: (Patient object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.admissionTime);
        fbb.addInt64(3, object.remainingTime);
        fbb.addBool(4, object.canPay);
        fbb.addFloat64(5, object.satisfaction);
        fbb.addInt64(6, object.statusIndex);
        fbb.addInt64(8, object.doctor.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final admissionTimeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final remainingTimeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final canPayParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final satisfactionParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final statusIndexParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final object = Patient(
          id: idParam,
          name: nameParam,
          admissionTime: admissionTimeParam,
          remainingTime: remainingTimeParam,
          canPay: canPayParam,
          satisfaction: satisfactionParam,
          statusIndex: statusIndexParam,
        );
        object.doctor.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        object.doctor.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Patient>(
          object.symptoms,
          store,
          obx_int.RelInfo<Patient>.toMany(3, object.id),
        );
        return object;
      },
    ),
    Symptom: obx_int.EntityDefinition<Symptom>(
      model: _entities[1],
      toOneRelations: (Symptom object) => [],
      toManyRelations: (Symptom object) => {},
      getId: (Symptom object) => object.id,
      setId: (Symptom object, int id) {
        object.id = id;
      },
      objectToFB: (Symptom object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, descriptionOffset);
        fbb.addInt64(3, object.cost);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final costParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final object = Symptom(
          id: idParam,
          name: nameParam,
          description: descriptionParam,
          cost: costParam,
        );

        return object;
      },
    ),
    Doctor: obx_int.EntityDefinition<Doctor>(
      model: _entities[2],
      toOneRelations: (Doctor object) => [],
      toManyRelations: (Doctor object) => {
        obx_int.RelInfo<Doctor>.toMany(2, object.id): object.patients,
      },
      getId: (Doctor object) => object.id,
      setId: (Doctor object, int id) {
        object.id = id;
      },
      objectToFB: (Doctor object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.price);
        fbb.addOffset(2, nameOffset);
        fbb.addInt64(3, object.statusIndex);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final priceParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final statusIndexParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final object = Doctor(
          id: idParam,
          name: nameParam,
          price: priceParam,
          statusIndex: statusIndexParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Doctor>(
          object.patients,
          store,
          obx_int.RelInfo<Doctor>.toMany(2, object.id),
        );
        return object;
      },
    ),
    StaffMember: obx_int.EntityDefinition<StaffMember>(
      model: _entities[3],
      toOneRelations: (StaffMember object) => [],
      toManyRelations: (StaffMember object) => {},
      getId: (StaffMember object) => object.id,
      setId: (StaffMember object, int id) {
        object.id = id;
      },
      objectToFB: (StaffMember object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final roleOffset = fbb.writeString(object.role);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, roleOffset);
        fbb.addInt64(3, object.salary);
        fbb.addFloat64(4, object.efficiency);
        fbb.addFloat64(5, object.quality);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final roleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final salaryParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final efficiencyParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final qualityParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final object = StaffMember(
          id: idParam,
          name: nameParam,
          role: roleParam,
          salary: salaryParam,
          efficiency: efficiencyParam,
          quality: qualityParam,
        );

        return object;
      },
    ),
    Resource: obx_int.EntityDefinition<Resource>(
      model: _entities[4],
      toOneRelations: (Resource object) => [],
      toManyRelations: (Resource object) => {},
      getId: (Resource object) => object.id,
      setId: (Resource object, int id) {
        object.id = id;
      },
      objectToFB: (Resource object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.total);
        fbb.addInt64(3, object.available);
        fbb.addInt64(4, object.typeIndex);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final totalParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final availableParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final object =
            Resource(
                id: idParam,
                name: nameParam,
                total: totalParam,
                available: availableParam,
              )
              ..typeIndex = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                12,
                0,
              );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Patient] entity fields to define ObjectBox queries.
class Patient_ {
  /// See [Patient.id].
  static final id = obx.QueryIntegerProperty<Patient>(
    _entities[0].properties[0],
  );

  /// See [Patient.name].
  static final name = obx.QueryStringProperty<Patient>(
    _entities[0].properties[1],
  );

  /// See [Patient.admissionTime].
  static final admissionTime = obx.QueryIntegerProperty<Patient>(
    _entities[0].properties[2],
  );

  /// See [Patient.remainingTime].
  static final remainingTime = obx.QueryIntegerProperty<Patient>(
    _entities[0].properties[3],
  );

  /// See [Patient.canPay].
  static final canPay = obx.QueryBooleanProperty<Patient>(
    _entities[0].properties[4],
  );

  /// See [Patient.satisfaction].
  static final satisfaction = obx.QueryDoubleProperty<Patient>(
    _entities[0].properties[5],
  );

  /// See [Patient.statusIndex].
  static final statusIndex = obx.QueryIntegerProperty<Patient>(
    _entities[0].properties[6],
  );

  /// See [Patient.doctor].
  static final doctor = obx.QueryRelationToOne<Patient, Doctor>(
    _entities[0].properties[7],
  );

  /// see [Patient.symptoms]
  static final symptoms = obx.QueryRelationToMany<Patient, Symptom>(
    _entities[0].relations[0],
  );
}

/// [Symptom] entity fields to define ObjectBox queries.
class Symptom_ {
  /// See [Symptom.id].
  static final id = obx.QueryIntegerProperty<Symptom>(
    _entities[1].properties[0],
  );

  /// See [Symptom.name].
  static final name = obx.QueryStringProperty<Symptom>(
    _entities[1].properties[1],
  );

  /// See [Symptom.description].
  static final description = obx.QueryStringProperty<Symptom>(
    _entities[1].properties[2],
  );

  /// See [Symptom.cost].
  static final cost = obx.QueryIntegerProperty<Symptom>(
    _entities[1].properties[3],
  );
}

/// [Doctor] entity fields to define ObjectBox queries.
class Doctor_ {
  /// See [Doctor.id].
  static final id = obx.QueryIntegerProperty<Doctor>(
    _entities[2].properties[0],
  );

  /// See [Doctor.price].
  static final price = obx.QueryIntegerProperty<Doctor>(
    _entities[2].properties[1],
  );

  /// See [Doctor.name].
  static final name = obx.QueryStringProperty<Doctor>(
    _entities[2].properties[2],
  );

  /// See [Doctor.statusIndex].
  static final statusIndex = obx.QueryIntegerProperty<Doctor>(
    _entities[2].properties[3],
  );

  /// see [Doctor.patients]
  static final patients = obx.QueryRelationToMany<Doctor, Patient>(
    _entities[2].relations[0],
  );
}

/// [StaffMember] entity fields to define ObjectBox queries.
class StaffMember_ {
  /// See [StaffMember.id].
  static final id = obx.QueryIntegerProperty<StaffMember>(
    _entities[3].properties[0],
  );

  /// See [StaffMember.name].
  static final name = obx.QueryStringProperty<StaffMember>(
    _entities[3].properties[1],
  );

  /// See [StaffMember.role].
  static final role = obx.QueryStringProperty<StaffMember>(
    _entities[3].properties[2],
  );

  /// See [StaffMember.salary].
  static final salary = obx.QueryIntegerProperty<StaffMember>(
    _entities[3].properties[3],
  );

  /// See [StaffMember.efficiency].
  static final efficiency = obx.QueryDoubleProperty<StaffMember>(
    _entities[3].properties[4],
  );

  /// See [StaffMember.quality].
  static final quality = obx.QueryDoubleProperty<StaffMember>(
    _entities[3].properties[5],
  );
}

/// [Resource] entity fields to define ObjectBox queries.
class Resource_ {
  /// See [Resource.id].
  static final id = obx.QueryIntegerProperty<Resource>(
    _entities[4].properties[0],
  );

  /// See [Resource.name].
  static final name = obx.QueryStringProperty<Resource>(
    _entities[4].properties[1],
  );

  /// See [Resource.total].
  static final total = obx.QueryIntegerProperty<Resource>(
    _entities[4].properties[2],
  );

  /// See [Resource.available].
  static final available = obx.QueryIntegerProperty<Resource>(
    _entities[4].properties[3],
  );

  /// See [Resource.typeIndex].
  static final typeIndex = obx.QueryIntegerProperty<Resource>(
    _entities[4].properties[4],
  );
}
